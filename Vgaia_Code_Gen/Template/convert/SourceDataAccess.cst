<%-- 
Name: Tidus
Author: 
Description: 
--%>
<%-- Context --%>
<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="" Inherits="" Debug="False" Description="Template description here." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="1. Context"
	Description="Table that the stored procedures should be based on." %>	
<%@ Property Name="SourcePrefix" Type="System.String" Default="SBS" Category="1. Context" Description="Prefix " %>
<%@ Property Name="Author" Type="System.String" Default="Huan.Nguyen Van" Category="1. Context"
	Description="T?n c?a ng??i t?o store." %>
	
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="System.Data" %>
<%-- Assembly References --%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="System.Data" %>
<%-- Namespace Imports --%>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.BaseTemplates" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ CodeTemplate Language="C#" TargetLanguage="Text" Description="AddTextWriter Demonstration." %>
<%@ Import Namespace="System.IO" %>
<!-- #include file="..\\include\\GolineUtilities.inc" -->
//-----------------------------------------------------------------------
// <Copyright file="<%= ReturnObjectName() %>.cs" company="Goline Corporation">
//     Copyright (c) Goline Corporation. All rights reserved.
// </copyright>
// <author><%= Author%></author>
//-----------------------------------------------------------------------
namespace MHBSConverter.DAO.sbs
{
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Runtime.Serialization;
	using System.Text;
	using MHBSConverter.Components.sbs;
	using MHBSConverter.Helper;
	using System.Data.SqlClient;
	using VGaiACommon.Component;
	
	/// <summary>
    /// This is <%= ReturnObjectName() %>DataAccess class
    /// </summary>
	public class <%= ReturnObjectName() %>DataAccess
	{
		/// <summary>
        /// Initializes a new instance of the <%= ReturnObjectName() %>DataAccess class
        /// </summary>
	  	public <%= ReturnObjectName() %>DataAccess()
        {
        }
		
		public static List<<%= ReturnObjectName() %>> GetList()
		{
		    List<<%= ReturnObjectName() %>> list = new List<<%= ReturnObjectName() %>>();
            <%= ReturnObjectName() %> obj = null;

            IConnectionManager sbsConnection = new ConnectionManagerSBS();
            try
            {
                sbsConnection.OpenConnection();

                StringBuilder sb = new StringBuilder();
				sb.Append("SELECT * FROM <%=this.SourceTable.Name%>");
				using (SqlCommand cmd = DataAccessHelperSBS.CreateSqlCommand(sb.ToString(), sbsConnection.CurrentConnection as SqlConnection))
                {
                    cmd.CommandType = System.Data.CommandType.Text;
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        while (reader.Read())
                        {
							obj = new <%= ReturnObjectName() %>();
							<%int count = 0;%>
							<%foreach(ColumnSchema column in SourceTable.Columns){%>
							obj.<%= column.Name%> = <%=GetStringValue(column, "reader")%><%count ++;%>
							<%}%>
							
							list.Add(obj);
						}
					}
				}
			}
			catch
            {
                throw;
            }
            finally
            {
                sbsConnection.CloseConnection();
            }

            return list;	
			
		}
	}
}
<script runat="template">
// My methods here.
private Regex excludedColumnRegex = null;

public void GenerateColumns()
{
	ColumnSchemaCollection GeneColumns =  new ColumnSchemaCollection(SourceTable.Columns);
	//ColumnSchemaCollection filteredColumns = FilterExcludedColumns(columns);
	int p = 0;
	for (int i = 0; i < GeneColumns.Count; i++)
	{
		
		Response.WriteLine("\t\t/// <summary>");
        Response.WriteLine("\t\t/// Gets or sets {0} field", GeneColumns[i].Name);
        Response.WriteLine("\t\t/// </summary>");
		Response.WriteLine("\t\tpublic " + ReturnValueType(GeneColumns[i]) + " " + GeneColumns[i].Name + " { get; set; }");
		Response.WriteLine("");
		p++;
		
		if (GeneColumns[i].NativeType == "tinyint")
		{
			Response.WriteLine("\t\t/// <summary>");
        	Response.WriteLine("\t\t/// Gets or sets {0} field", GeneColumns[i].Name);
        	Response.WriteLine("\t\t/// </summary>");
			Response.WriteLine("\t\tpublic string " + GeneColumns[i].Name + "String { get; set; }");
			Response.WriteLine("");
			p++;
		}
	}
}

//Return value type
public string ReturnValueType(ColumnSchema col)
{
	string stemp = "";
	switch (col.DataType)
	{
		case System.Data.DbType.Guid:
			stemp = "Guid";
			break;
		case System.Data.DbType.AnsiStringFixedLength:
			stemp = "string";
			break;
		case System.Data.DbType.AnsiString:
			stemp = "string";
			break;
		case System.Data.DbType.StringFixedLength:
			stemp = "string";
			break;
		case System.Data.DbType.Int16:
		case System.Data.DbType.Int32:
		case System.Data.DbType.Int64:
			stemp = "int";
			break;
		case System.Data.DbType.Decimal:
			stemp = "decimal";
			break;
		case System.Data.DbType.String:
			stemp = "string";
			break;
		case System.Data.DbType.Date:
			stemp = "DateTime";
			break;
		default:
			stemp = "" + col.DataType; 
		break;
	}
	
	if (stemp!="string" && col.AllowDBNull)
	{
		stemp+="?";
	}
	
	return stemp;
}
	
public string ReturnObjectName()
{
	string stable = this.SourcePrefix + SourceTable.Name.ToString();
	return stable;
}
	
public void GenerateConstructor(ColumnSchemaCollection columns, int indentLevel)
{
	for (int i = 0; i < columns.Count; i++)
	{
		GenerateConstructor(columns[i], indentLevel, i == 0, i == columns.Count - 1, 0);
	}
}

public void GenerateConstructor(ColumnSchema column, int indentLevel, bool isFirst, bool isLast, int maxLength)
{
	if ((column.NativeType == "smalldatetime") || (column.NativeType == "datetime"))
	{
		GenerateIndent(indentLevel + 1);
		Response.WriteLine("this.{0} = DateTime.MinValue.ToUniversalTime();", column.Name);
    }
}

public void GenerateIndent(int indentLevel)
{
    for (int i = 0; i < indentLevel; i++)
	{
		Response.Write('\t');
	}
}
</script>