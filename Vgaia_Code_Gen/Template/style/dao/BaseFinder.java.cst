<%-- 
Name:
Author: 
Description: 
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="" Inherits="" Debug="False" Description="Template description here." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="1. Context"
	Description="Table that the stored procedures should be based on." %>	

<%@ Property Name="HelpFormCode" Type="System.String" Default="1000" Category="1. Context" Description="Help Form Code" %>
<%@ Property Name="PackageFormCode" Type="System.String" Default="1000" Category="1. Context" Description="Package Form Code" %>

<%@ Property Name="Author" Type="System.String" Default="Goline Coporation" Category="1. Context" Description="Author" %>
<%@ Property Name="Package" Type="System.String" Default="Package" Category="1. Context" Description="Author kage" %>

<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="" Inherits="" Debug="False" Description="Template description here." %>
<%@ Property Name="SampleStringProperty" Type="System.String" Default="SomeValue" Optional="True" Category="Strings" Description="This is a sample string property." %>
<%@ Property Name="SampleBooleanProperty" Type="System.Boolean" Default="True" Optional="False" Category="Booleans" Description="This is a sample boolean property." %>


<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="System.Data" %>
<%-- Assembly References --%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="System.Data" %>
<%-- Namespace Imports --%>	
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.BaseTemplates" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="System.IO" %>
<!-- #include file="..\\..\\include\\GolineUtilities.inc" -->
/*
 * Copyright(C) 2012 Okasan Information Systems Co.,Ltd. All rights reserved.
 * 
 */
package jp.co.okasan.dao;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import jp.co.nec.frw0100.ap.dao.*;
import jp.co.nec.frw0000.cm.Frw00RuntimeException;

/**
 * Base<%=this.GetTablename(SourceTable)%> class's Description <BR>
 *
 * @author: <%=Author%> <%=this.GetCurrentDate()%> Create new
 */
public abstract class Base<%=this.GetTablename(SourceTable)%>Finder
	extends BaseDaoFinder
	implements SqlConst, <%=this.GetTablename(SourceTable)%>Const {
	<%int count=0;%>
	
	////////// Class methods //////////
	
	/**
	 * Select data with where condition. <br>
	 * Return null if have no data.
	 *
	 * @param where Where condition
	 * @return <%=this.GetTablename(SourceTable)%>Data search result
	 * @exception Frw00BlockadeException have blockade table
	 * @exception SQLException have failure when search data
	 */
	protected <%=this.GetTablename(SourceTable)%>Data select(SqlWhere where)
		throws SQLException {
		// Check block ade 
		checkBlockade(<%=this.GetTablename(SourceTable)%>Const.TABLE_NAME);
		
		// Get Target object
		<%=this.GetTablename(SourceTable)%>Target target = new <%=this.GetTablename(SourceTable)%>Target(true);
		
		// Get instance info
		Info info = <%=this.GetTablename(SourceTable)%>Info.getInstance();
		
		// SQL select
		SqlSelect select = new SqlSelect(info, where, target, READONLY);
		
		// Excute to list data
		List list = executeQuery(select.getSql(), select.getSqlParam());
		
		// return first data if found
		if (list.size() == 0) {
			return null;
		} else {
			return (<%=this.GetTablename(SourceTable)%>Data)list.get(0);
		}
	}
	
	/**
	 * Select data with where condition and target data. <br>
	 * Return null if have no data.
	 * 
	 * @param where Where condition
	 * @param target data to select
	 * @return <%=this.GetTablename(SourceTable)%>Data search result
	 * @exception Frw00BlockadeException have blockade table
	 * @exception SQLException have failure when search data
	 */
	protected <%=this.GetTablename(SourceTable)%>Data select(SqlWhere where,
		<%=this.GetTablename(SourceTable)%>Target target)
		throws SQLException {
		
		// Check block ade 
		checkBlockade(<%=this.GetTablename(SourceTable)%>Const.TABLE_NAME);
		
		// Get instance info
		Info info = <%=this.GetTablename(SourceTable)%>Info.getInstance();
		
		// SQL select
		SqlSelect select = new SqlSelect(info, where, target, READONLY);
		
		// Excute to list data
		List list = executeQuery(select.getSql(), select.getSqlParam());
		
		// return first data if found?
		if (list.size() == 0) {
			return null;
		} else {
			return (<%=this.GetTablename(SourceTable)%>Data)list.get(0);
		}
	}
	
	/**
	 * Select list data with where condition and target data. <BR>
	 * @param where: Where condition
	 * @param target object: <%=this.GetTablename(SourceTable)%>Target
	 * @param order: OrderBy condition
	 *
	 * @return List <%=this.GetTablename(SourceTable)%>Data
	 * @exception Frw00BlockadeException have blockade table
	 * @exception SQLException have failure when search data
	 */
	protected List select(SqlWhere where,
		<%=this.GetTablename(SourceTable)%>Target target,
		SqlOrder order)
		throws SQLException {
		// Check block ade
		checkBlockade(CmnT01Answer_push_messageConst.TABLE_NAME);
		
		// Create Source info
		Info info = <%=this.GetTablename(SourceTable)%>Info.getInstance();
		
		// Create Select SQL
		SqlSelect select = new SqlSelect(info, where, target, order, READONLY);
		
		// return list data
		return executeQuery(select.getSql(), select.getSqlParam());
	}
	
	/**
	 * Select list data <br>
	 *
	 * @param where condition
	 * @param target object
	 * @param order OrderBy condition
	 * @param offset
	 * @param num
	 * 
	 * @return List <%=this.GetTablename(SourceTable)%>Data
	 * @exception Frw00BlockadeException have blockade table
	 * @exception SQLException have failure when search data
	 */
	protected List select(SqlWhere where,
		<%=this.GetTablename(SourceTable)%>Target target,
		SqlOrder order, int offset, int num)
		throws SQLException {
		// Check block ade
		checkBlockade(<%=this.GetTablename(SourceTable)%>Const.TABLE_NAME);
		
		// Create Source info
		Info info = <%=this.GetTablename(SourceTable)%>Info.getInstance();
		
		// Create SQL selection
		SqlSelect select = new SqlSelect(info, where, target, order, offset, num);
		
		// Excute and return data
		return executeQuery(select.getSql(), select.getSqlParam());
	}
	
	/**
	 * Get Count number of records <br>
	 *
	 * @param where condition
	 * @return record number
	 * @exception Frw00BlockadeException have blockade table
	 * @exception SQLException have failure when search data
	 */
	protected int getCount(SqlWhere where)
		throws SQLException {
		// Check block ade
		checkBlockade(CmnT01Answer_push_messageConst.TABLE_NAME);
		
		// Create Source info
		Info info = <%=this.GetTablename(SourceTable)%>Info.getInstance();
		
		// Create SQL selection
		SqlSelect select = new SqlSelect(info, where);
		
		// Excute data to list
		List list = executeQuery(select.getSql(), select.getSqlParam());
		
		// Number element of list?
		return ((Integer)list.get(0)).intValue();
	}
	
	/**
	 * GetData object from resultset <br>
	 *
	 * @param resultset object
	 * @return Object data
	 * @exception SQLException
	 */
	protected Object getData(ResultSet resultset)
		throws SQLException {

		// Get data from ResultSet and return
		return <%=this.GetTablename(SourceTable)%>Reader.read(resultset);
	}
	
	/**
	 * Search all data column by key <br>
	 * Return null if have no data.
	 * 
	 <%count=0;%>
	 <%foreach(ColumnSchema column in SourceTable.PrimaryKey.MemberColumns){%>
	 * @param <%= this.GetColumnNameParam(column)%>: String
	 <%}%>
	 * @return <%=this.GetTablename(SourceTable)%>Data
	 * @exception Frw00BlockadeException have blockade table
	 * @exception SQLException have failure when search data
	 */
	public <%=this.GetTablename(SourceTable)%>Data getDataAllColumns(
		<%count=0;%>
		<%foreach(ColumnSchema column in SourceTable.PrimaryKey.MemberColumns){%>
		String <%=this.GetColumnNameParam(column)%><%count++;%><%if(count < SourceTable.PrimaryKey.MemberColumns.Count){%>,<%}%>
		<%}%>
	) throws SQLException {
		// Create SQl Where
		SqlWhere where = new SqlWhere();
		
		// Add condition
		<%count=0;%>
		<%foreach(ColumnSchema column in SourceTable.PrimaryKey.MemberColumns){%>
		where.addCondition(<%=column.Name%>, EQUAL,  <%=this.GetColumnNameParam(column)%>);
		<%}%>
		
		// Create target
		<%=this.GetTablename(SourceTable)%>Target target = new <%=this.GetTablename(SourceTable)%>Target(true);
		
		// exec and return
		return select(where, target);
	}
	
	/**
	 * Search by the key specified. <br>
	 * Return null if have no data.
	 *
	 <%count=0;%>
	 <%foreach(ColumnSchema column in SourceTable.PrimaryKey.MemberColumns){%>
	 * @param <%= this.GetColumnNameParam(column)%> String
	 <%}%>
	 * @param target object: <%=this.GetTablename(SourceTable)%>Target
	 * @return <%=this.GetTablename(SourceTable)%>Data
	 * @exception Frw00BlockadeException have blockade table
	 * @exception SQLException have failure when search data
	 */
	public <%=this.GetTablename(SourceTable)%>Data getDataSelectedColumns(
		<%count=0;%>
		<%foreach(ColumnSchema column in SourceTable.PrimaryKey.MemberColumns){%>
		String <%=this.GetColumnNameParam(column)%>,
		<%}%>
		<%=this.GetTablename(SourceTable)%>Target target
	) throws SQLException {

		// Create SQL Where
		SqlWhere where = new SqlWhere();
		
		// Add condition
		<%count=0;%>
		<%foreach(ColumnSchema column in SourceTable.PrimaryKey.MemberColumns){%>
		where.addCondition(<%=column.Name%>, EQUAL,  <%=this.GetColumnNameParam(column)%>);
		<%}%>

		return select(where, target);
	}
}
<script runat="template">
// My methods here.

public string SampleMethod()
{
	return "Method output.";
}
</script>