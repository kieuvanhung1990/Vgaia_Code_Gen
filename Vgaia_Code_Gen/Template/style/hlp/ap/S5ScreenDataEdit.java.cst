<%-- 
Name:
Author: 
Description: 
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="" Inherits="" Debug="False" Description="Template description here." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="1. Context"
	Description="Table that the stored procedures should be based on." %>	

<%@ Property Name="HelpFormCode" Type="System.String" Default="1000" Category="1. Context" Description="Help Form Code" %>
<%@ Property Name="PackageFormCode" Type="System.String" Default="1000" Category="1. Context" Description="Package Form Code" %>

<%@ Property Name="Author" Type="System.String" Default="Goline Coporation" Category="1. Context" Description="Author" %>
<%@ Property Name="Package" Type="System.String" Default="Package" Category="1. Context" Description="Author kage" %>

<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="" Inherits="" Debug="False" Description="Template description here." %>
<%@ Property Name="SampleStringProperty" Type="System.String" Default="SomeValue" Optional="True" Category="Strings" Description="This is a sample string property." %>
<%@ Property Name="SampleBooleanProperty" Type="System.Boolean" Default="True" Optional="False" Category="Booleans" Description="This is a sample boolean property." %>

<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="System.Data" %>

<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="System.Data" %>
<%-- Assembly References --%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="System.Data" %>
<%-- Namespace Imports --%>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.BaseTemplates" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="System.IO" %>
<!-- #include file="..\\..\\..\\include\\GolineUtilities.inc" -->
/*
 * Copyright(C) 2012 Okasan Information Systems Co.,Ltd. All rights reserved.
 */
package jp.co.okasan.ap.hlp.hlp<%=this.HelpFormCode%>;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import jp.co.nec.com0000.ap.Context;
import jp.co.nec.com0000.ap.IStage;
import jp.co.nec.frw0000.ap.Frw00InstanceFactory;
import jp.co.nec.frw0000.cm.logging.Frw00Logger;
import jp.co.okasan.cmn.CommonFunction;
import jp.co.okasan.dao.<%=this.GetTablename(this.SourceTable)%>Data;
import jp.co.okasan.cm.hlp.hlp<%=this.HelpFormCode%>.Hlp<%=this.HelpFormCode%>InputData;
import jp.co.okasan.cm.hlp.hlp<%=this.HelpFormCode%>.Hlp<%=this.HelpFormCode%>ResultData;

/**
 * S5ScreenDataEdit Class's Description. <br>
 * 
 * @author: <%=Author%> <%=this.GetCurrentDate()%> Create New
 */
public class S5ScreenDataEdit implements IStage {
	
	////////// Class Variables //////////
	
	/** Class name of initial stage */
	private static final String CLASS_NAME = S5ScreenDataEdit.class.getName();

	/** Method name of initial stage */
	private static final String METHOD_NAME = "doTask";
	
	////////// Class Constructor //////////
	
	/**
	 * Constructor Method <br>
	 * 
	 * @param Nothing
	 * @exception Nothing
	 */
	public S5ScreenDataEdit() {
	}
		
	////////// Class Methods //////////
	
	/**
	 * Create business route. <br>
	 * 
	 * @param factory Frw00InstanceFactory instance of Factory
	 * @exception Nothing
	 */
	public void create(Frw00InstanceFactory factory) {
	}
	
	/**
	 * Process Screen Data Edit task <br>
	 * 
	 * @param ctx Context the contextual of <%=this.GetTableDescription(this.SourceTable)%>
	 * @return boolean dotask state
	 * @exception SQLException
	 * @exception Frw00BlockadeException when table is blockade
	 */
	public boolean doTask(Context ctx) throws SQLException {
		final Frw00Logger logger = ctx.getLogger();
		logger.writeTrace(CLASS_NAME, METHOD_NAME, "enter");

		// Run edit screen edit
		editScreenData(ctx);

		logger.writeTrace(CLASS_NAME, METHOD_NAME, "exit");
		return true;
	}
	
	/**
	 * Method edit screen data <br>
	 * 
	 * @param ctx Context the contextual of <%=this.GetTableDescription(this.SourceTable)%>
	 * @exception Nothing
	 */
	private void editScreenData(Context ctx) {
		Hlp<%=this.HelpFormCode%>Context context = (Hlp<%=this.HelpFormCode%>Context) ctx;
		Hlp<%=this.HelpFormCode%>InputData inputData = context.getInputData();
		Hlp<%=this.HelpFormCode%>ResultData resultData = context.getResultData();

		// Get data list
		List<?> dataList = context.getDataList();
		List<String[]> list = new ArrayList<>();

		Iterator<?> i = dataList.iterator();

		while (i.hasNext()) {
			<%=this.GetTablename(SourceTable)%>Data sourceData = (<%=this.GetTablename(SourceTable)%>Data) i.next();

			String column[] = new String[<%=SourceTable.Columns.Count%>];
			
			<%int count =0;%>
			<%foreach(ColumnSchema col  in SourceTable.Columns){%>
			<%if(this.ColumnIsString(col)){%>
			column[<%=count%>] = sourceData.get<%=this.GetColumnName(col)%>();
			<%}else{%>
			column[<%=count%>] = sourceData.get<%=this.GetColumnName(col)%>St();
			<%}%>
			<%count++;%>
			<%}%>

			list.add(column);
		}
		
		// Set result data
		<%foreach(ColumnSchema col  in SourceTable.Columns){%>
		resultData.set<%=this.GetColumnName(col)%>(inputData.get<%=this.GetColumnName(col)%>());
		<%}%>
		
		resultData.setDataList(list);
        
        CommonFunction.setRowCountMsg(resultData, dataList.size());
	}
}

<script runat="template">
// My methods here.

public string SampleMethod()
{
	return "Method output.";
}
</script>