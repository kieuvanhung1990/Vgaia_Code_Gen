<%-- 
Name:
Author: 
Description: 
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="" Inherits="" Debug="False" Description="Template description here." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="1. Context"
	Description="Table that the stored procedures should be based on." %>	

<%@ Property Name="HelpFormCode" Type="System.String" Default="1000" Category="1. Context" Description="Help Form Code" %>
<%@ Property Name="PackageFormCode" Type="System.String" Default="1000" Category="1. Context" Description="Package Form Code" %>

<%@ Property Name="Author" Type="System.String" Default="Goline Coporation" Category="1. Context" Description="Author" %>
<%@ Property Name="Package" Type="System.String" Default="mst" Category="1. Context" Description="Author kage" %>

<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="" Inherits="" Debug="False" Description="Template description here." %>
<%@ Property Name="SampleStringProperty" Type="System.String" Default="SomeValue" Optional="True" Category="Strings" Description="This is a sample string property." %>
<%@ Property Name="SampleBooleanProperty" Type="System.Boolean" Default="True" Optional="False" Category="Booleans" Description="This is a sample boolean property." %>

<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="System.Data" %>

<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="System.Data" %>
<%-- Assembly References --%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="System.Data" %>
<%-- Namespace Imports --%>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.BaseTemplates" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="System.IO" %>
<!-- #include file="..\\..\\..\\include\\GolineUtilities.inc" -->
/*
 * Copyright(C) 2012 Okasan Information Systems Co.,Ltd. All rights reserved.
 */
package jp.co.okasan.ap.<%=Package%>.<%=Package%><%=this.PackageFormCode%>;

import java.math.BigDecimal;
import java.sql.SQLException;

import jp.co.nec.frw0000.ap.Frw00BlockadeException;
import jp.co.nec.frw0100.ap.dao.SqlWhere;

import jp.co.okasan.cmn.ConstantValues;
import jp.co.okasan.dao.Base<%=this.GetTablename(SourceTable)%>Finder;
import jp.co.okasan.dao.<%=this.GetTablename(SourceTable)%>Const;
import jp.co.okasan.dao.<%=this.GetTablename(SourceTable)%>Data;
import jp.co.okasan.dao.<%=this.GetTablename(SourceTable)%>Target;

/**
 * <%=this.GetTablename(SourceTable)%>Finder Class's Description <br>
 * 
 * @author: <%=Author%> <%=this.GetCurrentDate()%> Create New
 */
public class <%=this.GetTablename(SourceTable)%>Finder extends Base<%=this.GetTablename(SourceTable)%>Finder {
	
	////////// Class methods //////////
	
	<%int count=0;%>
	/**
	 * Search by the key specified. <br>
	 * Return null if have no data.
	 * 
	 <%count=0;%>
	 <%foreach(ColumnSchema column in SourceTable.PrimaryKey.MemberColumns){%>
	 * @param <%=this.GetColumnNameParam(column)%> String
	 <%}%>
	 * @return <%=this.GetTablename(SourceTable)%>Data search result
	 * @exception Frw00BlockadeException have blockade table
	 * @exception SQLException have failure when search data
	 */
    protected <%=this.GetTablename(SourceTable)%>Data findData(<%count=0;%>
		<%foreach(ColumnSchema column in SourceTable.PrimaryKey.MemberColumns){%>String <%=this.GetColumnNameParam(column)%><%count++;%><%if(count < SourceTable.PrimaryKey.MemberColumns.Count){%>,<%}%><%}%>)
			throws Frw00BlockadeException, SQLException {
		return findData(<%foreach(ColumnSchema column in SourceTable.PrimaryKey.MemberColumns){%><%=this.GetColumnNameParam(column)%>, <%}%>ConstantValues.NOT_DEL);
	}
	
	/**
	 * Search by the key specified. <br>
	 * Return null if have no data.
	 * 
	 <%count=0;%>
	 <%foreach(ColumnSchema column in SourceTable.PrimaryKey.MemberColumns){%>
	 * @param <%=this.GetColumnNameParam(column)%> String
	 <%}%>
	 * @param delCode BigDecimal
	 * @return <%=this.GetTablename(SourceTable)%>Data
	 * @exception Frw00BlockadeException have blockade table
	 * @exception SQLException have failure when search data
	 */
    protected <%=this.GetTablename(SourceTable)%>Data findData(<%foreach(ColumnSchema column in SourceTable.PrimaryKey.MemberColumns){%>
		String <%=this.GetColumnNameParam(column)%>,<%}%> BigDecimal delCode)
			throws Frw00BlockadeException, SQLException {
			
		// Create SQL Where
		SqlWhere where = new SqlWhere();
		
		// Add condition by key into clause
		<%foreach(ColumnSchema column in SourceTable.PrimaryKey.MemberColumns){%>
		where.addCondition(<%=this.GetTablename(SourceTable)%>Const.<%=column.Name%>, EQUAL, <%=this.GetColumnNameParam(column)%>);
		<%}%>
		
		// Add condition by DEL_CD into clause
		where.addCondition(<%=this.GetTablename(SourceTable)%>Const.DEL_CD, EQUAL, delCode);

		return super.select(where, new <%=this.GetTablename(SourceTable)%>Target(true));
	}
	
	/**
	 * Search all the field with the key specified. <br>
	 * 
	 * @param String
	 * @return <%=this.GetTablename(SourceTable)%>Data
	 * @exception Frw00BlockadeException have blockade table
	 * @exception SQLException have failure when search data
	 */
    protected <%=this.GetTablename(SourceTable)%>Data getAllDataColumns(
		<%count=0;%>
		<%foreach(ColumnSchema column in SourceTable.PrimaryKey.MemberColumns){%>String <%=this.GetColumnNameParam(column)%><%count++;%><%if(count< SourceTable.PrimaryKey.MemberColumns.Count){%>, <%}%><%}%>)
			throws Frw00BlockadeException, SQLException {
		<%count=0;%>
		return super.getDataAllColumns(<%foreach(ColumnSchema column in SourceTable.PrimaryKey.MemberColumns){%><%=this.GetColumnNameParam(column)%><%count++;%><%if(count < SourceTable.PrimaryKey.MemberColumns.Count){%>, <%}%><%}%>);
	}
}
<script runat="template">
// My methods here.

public string SampleMethod()
{
	return "Method output.";
}
</script>