<%-- 
Name:
Author: 
Description: 
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="" Inherits="" Debug="False" Description="Template description here." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="1. Context"
	Description="Table that the stored procedures should be based on." %>	

<%@ Property Name="HelpFormCode" Type="System.String" Default="1000" Category="1. Context" Description="Help Form Code" %>
<%@ Property Name="PackageFormCode" Type="System.String" Default="1000" Category="1. Context" Description="Package Form Code" %>

<%@ Property Name="Author" Type="System.String" Default="Goline Coporation" Category="1. Context" Description="Author" %>
<%@ Property Name="Package" Type="System.String" Default="mst" Category="1. Context" Description="Author kage" %>

<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="" Inherits="" Debug="False" Description="Template description here." %>
<%@ Property Name="SampleStringProperty" Type="System.String" Default="SomeValue" Optional="True" Category="Strings" Description="This is a sample string property." %>
<%@ Property Name="SampleBooleanProperty" Type="System.Boolean" Default="True" Optional="False" Category="Booleans" Description="This is a sample boolean property." %>

<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="System.Data" %>

<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="System.Data" %>
<%-- Assembly References --%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="System.Data" %>
<%-- Namespace Imports --%>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.BaseTemplates" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="System.IO" %>
<!-- #include file="..\\..\\..\\include\\GolineUtilities.inc" -->
/*
 * Copyright(C) 2012 Okasan Information Systems Co.,Ltd. All rights reserved.
 */
package jp.co.okasan.ap.<%=Package%>.<%=Package%><%=this.PackageFormCode%>;

import java.math.BigDecimal;
import java.sql.SQLException;
import java.sql.ResultSet;

import jp.co.nec.frw0000.ap.Frw00BlockadeException;
import jp.co.nec.frw0100.ap.dao.SqlWhere;

import jp.co.okasan.cmn.ConstantValues;
import jp.co.okasan.dao.Base<%=this.GetTablename(SourceTable)%>Updater;
import jp.co.okasan.dao.<%=this.GetTablename(SourceTable)%>Const;
import jp.co.okasan.dao.<%=this.GetTablename(SourceTable)%>Data;
import jp.co.okasan.dao.<%=this.GetTablename(SourceTable)%>Target;

/**
 * <%=this.GetTablename(SourceTable)%>Updater Class's Description <br>
 * 
 * @author: <%=Author%> <%=this.GetCurrentDate()%> Create New
 */
public class <%=this.GetTablename(SourceTable)%>Updater extends Base<%=this.GetTablename(SourceTable)%>Updater {
	
	////////// Class methods //////////
	
	<%int count=0;%>
	/**
	 * Delete <%=this.GetTablename(SourceTable)%>Data from table <%=this.GetTablename(this.SourceTable)%> <br>
	 * 
	 * @param <%=this.GetTablename(SourceTable)%>Data delete content condition class
	 * @return int deleted records
	 * @exception SQLException
	 */
    protected int deleteFromTable(<%=this.GetTablename(SourceTable)%>Data data)
			throws SQLException {
		// create Target object
		<%=this.GetTablename(SourceTable)%>Target target = new <%=this.GetTablename(SourceTable)%>Target();
		
		// delCd
		target.setDelCd(true);
		
		// UpdatedDateTime
		target.setUpdDateTime(true);
		
		// UpdatedUser
		target.setUpdUserId(true);

		return update(target, data);
	}
	
	/**
	 * Search <%=this.GetTablename(this.SourceTable)%> for update <br>
	 * Select all field of the table
	 * 
	 <%count=0;%>
	 <%foreach(ColumnSchema column in SourceTable.PrimaryKey.MemberColumns){%>
	 * @param <%=this.GetColumnNameParam(column)%> String Key to searck
	 <%}%>
	 * @return <%=this.GetTablename(SourceTable)%>Data search result
	 * @exception Frw00BlockadeException have blockade table
	 * @exception SQLException have failure when search data
	 */
    protected <%=this.GetTablename(SourceTable)%>Data findDataForUpdate(
		<%count=0;%>
		<%foreach(ColumnSchema column in SourceTable.PrimaryKey.MemberColumns){%><%=this.GetColumnDataType(column)%> <%=this.GetColumnNameParam(column)%><%count++;%><%if(count< SourceTable.PrimaryKey.MemberColumns.Count){%>, <%}%><%}%>)
			throws Frw00BlockadeException, SQLException {
		return findDataForUpdate(<%foreach(ColumnSchema column in SourceTable.PrimaryKey.MemberColumns){%><%=this.GetColumnNameParam(column)%>, <%}%>ConstantValues.NOT_DEL);
	}
	
	/**
	 *Search <%=this.GetTablename(this.SourceTable)%> for update with Delcode <br>
	 * 
	 <%count=0;%>
	 <%foreach(ColumnSchema column in SourceTable.PrimaryKey.MemberColumns){%>
	 * @param <%=this.GetColumnNameParam(column)%> String Key to find
	 <%}%>
	 * @param delCode BigDecimal
	 * @return <%=this.GetTablename(SourceTable)%>Data search result
	 * @exception Frw00BlockadeException have blockade table
	 * @exception SQLException have failure when search data
	 */
    protected <%=this.GetTablename(SourceTable)%>Data findDataForUpdate(
			<%foreach(ColumnSchema column in SourceTable.PrimaryKey.MemberColumns){%>
			<%=this.GetColumnDataType(column)%> <%=this.GetColumnNameParam(column)%>, 
			<%}%>
			BigDecimal delCode) throws Frw00BlockadeException, SQLException {
			
		// Create SQL Where
		SqlWhere where = new SqlWhere();
		
		// Add key where to condition
		<%foreach(ColumnSchema column in SourceTable.PrimaryKey.MemberColumns){%>
		where.addCondition(<%=this.GetTablename(SourceTable)%>Const.<%=column.Name%>, EQUAL, <%=this.GetColumnNameParam(column)%>);
		<%}%>
		
		// add del code to condition
		where.addCondition(<%=this.GetTablename(SourceTable)%>Const.DEL_CD, EQUAL, delCode);

		// Exec and return
		return selectForUpdate(where, new <%=this.GetTablename(SourceTable)%>Target(true));
	}
	
	/**
	 * Insert a record data into table <%=this.GetTablename(SourceTable)%><br>
	 * 
	 * @param data <%=this.GetTablename(SourceTable)%>Data insert content
	 * @return int insert records number
	 * @exception SQLException
	 */
    protected int insertIntoTable(<%=this.GetTablename(SourceTable)%>Data data)
			throws SQLException {
		return insert(data);
	}
	
	/**
	 * Update a record data into table <%=this.GetTablename(SourceTable)%><br>
	 * 
	 * @param data <%=this.GetTablename(SourceTable)%>Data update data content
	 * @return int update records number
	 * @exception SQLException
	 */
    protected int updateFromTable(<%=this.GetTablename(SourceTable)%>Data currentData)
			throws SQLException {
			
		// Create target data
		<%=this.GetTablename(SourceTable)%>Target targetData = new <%=this.GetTablename(SourceTable)%>Target();
		
		<%foreach(ColumnSchema col in this.SourceTable.Columns){%>
		<%if(col.Name == "DEL_CD" || col.Name == "REG_USER_ID" || col.Name == "REG_DATE_TIME") continue;%>
		// Set <%=this.GetColumnDescription(col)%>
		targetData.set<%=this.GetColumnName(col)%>(true);
		
		<%}%>
		
		return update(targetData, currentData);
	}
}
<script runat="template">
// My methods here.

public string SampleMethod()
{
	return "Method output.";
}
</script>