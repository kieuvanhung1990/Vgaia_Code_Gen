<%-- 
Name:
Author: 
Description: 
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="" Inherits="" Debug="False" Description="Template description here." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="1. Context"
	Description="Table that the stored procedures should be based on." %>	

<%@ Property Name="HelpFormCode" Type="System.String" Default="1000" Category="1. Context" Description="Help Form Code" %>
<%@ Property Name="PackageFormCode" Type="System.String" Default="1000" Category="1. Context" Description="Package Form Code" %>

<%@ Property Name="Author" Type="System.String" Default="Goline Coporation" Category="1. Context" Description="Author" %>
<%@ Property Name="Package" Type="System.String" Default="mst" Category="1. Context" Description="Author kage" %>

<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="" Inherits="" Debug="False" Description="Template description here." %>
<%@ Property Name="SampleStringProperty" Type="System.String" Default="SomeValue" Optional="True" Category="Strings" Description="This is a sample string property." %>
<%@ Property Name="SampleBooleanProperty" Type="System.Boolean" Default="True" Optional="False" Category="Booleans" Description="This is a sample boolean property." %>

<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="System.Data" %>

<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="System.Data" %>
<%-- Assembly References --%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="System.Data" %>
<%-- Namespace Imports --%>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.BaseTemplates" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="System.IO" %>
<!-- #include file="..\\..\\..\\include\\GolineUtilities.inc" -->
/*
 * Copyright(C) 2012 Okasan Information Systems Co.,Ltd. All rights reserved.
 */
package jp.co.okasan.pr.<%=Package%>.<%=Package%><%=PackageFormCode%>;

import java.awt.Color;
import java.awt.Component;
import java.awt.Rectangle;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.HashMap;

import jp.co.nec.frw0000.pr.view.Frw00ClientPanel;
import jp.co.nec.frw1000.pr.clcommon.Frw10ClientException;
import jp.co.nec.frw1000.pr.clcommon.Frw10ComboElement;
import jp.co.nec.frw1000.pr.clcommon.Frw10ComboInfo;
import jp.co.nec.frw1000.pr.clcommon.Frw10WindowDataProc;
import jp.co.nec.frw1000.pr.component.UIComboBox;
import jp.co.nec.frw1000.pr.component.UILabel;
import jp.co.nec.frw1000.pr.component.UIShowLabel;
import jp.co.okasan.cmn.ItemValidator;
import jp.co.okasan.frw.pr.MUIActionModeComboBox;
import jp.co.okasan.frw.pr.UIHalfWidthANTextField2;
import jp.co.okasan.frw.pr.UIHalfWidthTextField2;
import jp.co.okasan.frw.pr.MUIHalfWidthANTextField;
import jp.co.okasan.frw.pr.MUIHalfWidthTextField;
import jp.co.okasan.frw.pr.MUILabel;
import jp.co.okasan.frw.pr.MUIComboBox;
import jp.co.okasan.frw.pr.MUIShowLabel;


import jp.co.okasan.cm.<%=Package%>.<%=Package%><%=PackageFormCode%>.<%=this.GetInputDataName(this.Package, this.PackageFormCode)%>;

/**
 * <%=this.GetPanelName(this.Package, this.PackageFormCode)%> Class's Description<br>
 * <P>
 * Client area class of <%=this.GetTableDescription(this.SourceTable)%> screen.
 * </p>
 * 
 * @author: <%=this.Author%> <%=this.GetCurrentDate()%> Create New
 */
public class <%=this.GetPanelName(this.Package, this.PackageFormCode)%> extends Frw00ClientPanel implements ItemListener {
	
	////////// Class Variables //////////
	
	/**
	 * Flag to mark when need to get and bind data to screen
	 */
	boolean needToGetData = true;
	
	/** Click F2 When Result State */
	boolean F2 = false;
	
	/** Hidden Updated Time*/
	private String timeStamp;
	
	/** Entry Mode ComboBox */
	MUIActionModeComboBox cboActionMode = null;
	
	/** Title label */
	MUILabel lblTitle = null;
	
	/** Entry Mode label */
	MUILabel lblEntryMode = null;
	
	<%foreach(ColumnSchema col in this.SourceTable.Columns){%>
	<%if(col.Name == "DEL_CD" || col.Name == "REG_DATE_TIME" || col.Name == "REG_USER_ID" || col.Name == "UPD_DATE_TIME" || col.Name == "UPD_USER_ID") continue;%>
	/** <%=this.GetColumnDescription(col)%> label */
	MUILabel lbl<%=this.GetColumnName(col)%> = null;
	
	<%}%>
	/** Reg Date Time label */
	MUILabel lblRegistered = null;
	
	/** Upd Date Time label */
	MUILabel lblUpdated = null;
	
	<%foreach(ColumnSchema col in this.SourceTable.Columns){%>
	<%if(col.Name == "DEL_CD" || col.Name == "REG_DATE_TIME" || col.Name == "REG_USER_ID" || col.Name == "UPD_DATE_TIME" || col.Name == "UPD_USER_ID") continue;%>
	/** <%=this.GetColumnDescription(col)%> TextField */
	MUIHalfWidthTextField txt<%=this.GetColumnName(col)%> = null;
	
	<%}%>
	
	/** Reg Date Time UIShowLabel */
	MUIShowLabel lblRegUserId = null;
	
	/** Reg User Id UIShowLabel */
	MUIShowLabel lblRegDateTime = null;
	
	/** Upd Date Time UIShowLabel */
	MUIShowLabel lblUpdUserId = null;
	
	/** Upd User Id UIShowLabel */
	MUIShowLabel lblUpdDateTime = null;
	
	////////// Methods define //////////
	
	/**
	 * Constructor <br>
	 * Call constructor base template.
	 * 
	 * @param Nothing
	 * @exception
	 */	
	public <%=this.GetPanelName(this.Package, this.PackageFormCode)%>() {
        super();

        try {
		
			// Check Business role
			PRHelper.checkRoleEntryFormThrowErr(BusinessRoleInfo.F9999);
		
            // Init control
            jbInit();
        } catch (Exception e) {
		
            // Show error dialog
            showErrorDialog(e, true);
        }
    }
	
	/**
	 * get help control for component<br>
	 * 
	 * @param component Component
	 * @return String window help code ID
	 * @exception
	 */
	public String getHelpWindowInfo(Component component) {

        // Create help ID
        String helpId = null;
		
        // Get default HelpId
        String defaultHelpId = "<%=this.HelpFormCode%>";

		<%int count=0;%>
        // if Help in keys of table
        if (<%foreach(ColumnSchema column in this.SourceTable.PrimaryKey.MemberColumns){%>component.equals(this.txt<%=this.GetColumnName(column)%>)<%count++;%><%if(count < this.SourceTable.PrimaryKey.MemberColumns.Count){%> || <%}%><%}%>) {
            helpId = defaultHelpId;
        } 
		
        return helpId;
    }
	
	/**
	 * Method show data<br>
	 * 
	 * @param dataList HashMap
	 * @exception Frw10ClientException
	 */
	@SuppressWarnings("rawtypes")
	public void showData(HashMap dataList) throws Frw10ClientException {
	
		// Set window data
        Frw10WindowDataProc.setWindowData(this, dataList);
    }
	
	/**
	 * Method create instance of screen's component <br>
	 * 
	 * @param Nothing
	 * @exception Exception
	 */
	private void jbInit() throws Exception {
	
		final int xOfLabelCol1 = 25;
		final int lblWidthCol1 = 60;
		int xOfEditorCol1 = lblWidthCol1 + 50;
		
		// y of control
		int y = 20;
	
		lblEntryMode = new MUILabel();
		lblEntryMode.setOpaque(false);
		lblEntryMode.setText("ACTION_MODE");
		lblEntryMode.setBounds(new Rectangle(xOfLabelCol1, y, lblWidthCol1, 20));
		this.add(lblEntryMode);
	
		//Entry Mode combobox
		cboActionMode = new MUIActionModeComboBox();
		cboActionMode.setPartsName("actionMode");
		cboActionMode.setLocation(xOfEditorCol1, y);
		cboActionMode.addItemListener(this);
		this.add(cboActionMode);
		
		y += 25;
				
		<%int x=25, y=45, w=100, h = 20;%>
		<%foreach(ColumnSchema col in this.SourceTable.Columns){%>
		<%if(col.Name == "DEL_CD" || col.Name == "REG_DATE_TIME" || col.Name == "REG_USER_ID" || col.Name == "UPD_DATE_TIME" || col.Name == "UPD_USER_ID") continue;%>
		// <%=this.GetColumnDescription(col)%> Label
		lbl<%=this.GetColumnName(col)%> = new MUILabel();
		lbl<%=this.GetColumnName(col)%>.setOpaque(false);
		lbl<%=this.GetColumnName(col)%>.setText("<%=this.GetPanelName(this.Package, this.PackageFormCode)%>_lbl<%=this.GetColumnName(col)%>");
		lbl<%=this.GetColumnName(col)%>.setBounds(new Rectangle(xOfLabelCol1, y, lblWidthCol1, <%=h%>));
		this.add(lbl<%=this.GetColumnName(col)%>);
		
		// <%=this.GetColumnDescription(col)%> TextField
		txt<%=this.GetColumnName(col)%> = new MUIHalfWidthTextField();
		<%if(this.IsTextColumn(col)){%>
		txt<%=this.GetColumnName(col)%>.setMaxLength(<%=col.Size%>);
		<%}%>
		txt<%=this.GetColumnName(col)%>.setBounds(new Rectangle(xOfEditorCol1, lbl<%=this.GetColumnName(col)%>.getY(), <%=w%>, <%=h%>));
		txt<%=this.GetColumnName(col)%>.setAlphabetUpper(false);
		txt<%=this.GetColumnName(col)%>.setPartsName("<%=this.GetColumnNameParam(col)%>");
		this.add(txt<%=this.GetColumnName(col)%>);
		<%if(col.Name == this.SourceTable.PrimaryKey.MemberColumns[ this.SourceTable.PrimaryKey.MemberColumns.Count-1].Name){y=y+40;}else{y= y+ 25;}%>
		
		y += 25;
		
		<%}%>
		
		
		<%y=y+15;%>
		
		// Register and updated 
		int yOfLabelRegister = txtRemarks.getY() + txtRemarks.getHeight() + 20;
		
		// Registed Label
		lblRegistered = new MUILabel();
		lblRegistered.setOpaque(false);
		lblRegistered.setText("Registered");
		lblRegistered.setBounds(new Rectangle(<%=x%>, yOfLabelRegister, lblWidthCol1, 20));
		this.add(lblRegistered);
		
		// Registed time Label
		lblRegDateTime = new MUIShowLabel();
		lblRegDateTime.setPartsName("RegDateTime");
		lblRegDateTime.setBounds(new Rectangle(xOfEditorCol1, yOfLabelRegister, 100, 20));
		this.add(lblRegDateTime);
		
		// Registed user Label
		lblRegUserId = new MUIShowLabel();
		lblRegUserId.setPartsName("RegUserId");
		lblRegUserId.setBounds(new Rectangle(xOfEditorCol1 + lblRegDateTime.getWidth(), yOfLabelRegister, 150, 20));
		this.add(lblRegUserId);
		
		yOfLabelRegister +=25;
		
		// Updated Label
		lblUpdated = new MUILabel();
		lblUpdated.setOpaque(false);
		lblUpdated.setText("Updated");
		lblUpdated.setBounds(new Rectangle(<%=x%>, yOfLabelRegister , lblWidthCol1, 20));
		this.add(lblUpdated);
		
		// Updated time show Label
		lblUpdDateTime = new MUIShowLabel();
		lblUpdDateTime.setPartsName("UpdDateTime");
		lblUpdDateTime.setBounds(new Rectangle(xOfEditorCol1, yOfLabelRegister, 100, 20));
		this.add(lblUpdDateTime);
		
		// Updated user show label
		lblUpdUserId = new MUIShowLabel();
		lblUpdUserId.setPartsName("UpdUserId");
		lblUpdUserId.setBounds(new Rectangle(xOfEditorCol1 + lblUpdDateTime.getWidth(), yOfLabelRegister, 150, 20));
		this.add(lblUpdUserId);	
	}
	
	/**
	 * Get Hidden Updated Time<br>
	 * 
	 * @param 
	 * @return String
	 * @exception
	 */
	public String getTimeStamp() {
		return timeStamp;
	}
	
	/**
	 * Set Hidden Updated Time<br>
	 * 
	 * @param 
	 * @return String
	 * @exception
	 */
	public void setTimeStamp(String timeStamp) {
		this.timeStamp = timeStamp;
	}
	
	@Override
	public void itemStateChanged(ItemEvent e) {

		if (e.getSource().equals(this.cboActionMode)
				&& e.getStateChange() == ItemEvent.SELECTED) {

			// If is entry mode
			if (ItemValidator.isEntryMode(cboActionMode)) {
			
				<%foreach(ColumnSchema column in this.SourceTable.PrimaryKey.MemberColumns){%>
				this.txt<%=this.GetColumnName(column)%>.setEnabled(false);
				this.txt<%=this.GetColumnName(column)%>.reset();
				this.txt<%=this.GetColumnName(column)%>.hiddenMandatoryLabel();
				
				<%}%>
			} else {
				
				<%foreach(ColumnSchema column in this.SourceTable.PrimaryKey.MemberColumns){%>
				this.txt<%=this.GetColumnName(column)%>.setEnabled(true);
				this.txt<%=this.GetColumnName(column)%>.showMandatoryLabel();
				
				<%}%>
			}
		}
	}
	
	/**
	 * Get default unEdit component
	 * 
	 * @return
	 */
	protected List<JComponent> getDefaultUnEditComponents() {
		List<JComponent> compList = new ArrayList<JComponent>();

		return compList;
	}
	
		/**
	 * Set enable/disable for table and button
	 * 
	 * @param param
	 */
	protected void setEnableControl(boolean param) {
		this.btnReissueDate.setEnabled(param);
	}
}

<script runat="template">
// My methods here.

public string SampleMethod()
{
	return "Method output.";
}
</script>