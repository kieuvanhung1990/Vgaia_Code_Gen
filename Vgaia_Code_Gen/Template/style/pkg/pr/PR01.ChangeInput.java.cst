<%-- 
Name:
Author: 
Description: 
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="" Inherits="" Debug="False" Description="Template description here." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="1. Context"
	Description="Table that the stored procedures should be based on." %>	

<%@ Property Name="HelpFormCode" Type="System.String" Default="1000" Category="1. Context" Description="Help Form Code" %>
<%@ Property Name="PackageFormCode" Type="System.String" Default="1000" Category="1. Context" Description="Package Form Code" %>

<%@ Property Name="Author" Type="System.String" Default="Goline Coporation" Category="1. Context" Description="Author" %>
<%@ Property Name="Package" Type="System.String" Default="mst" Category="1. Context" Description="Author kage" %>

<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="" Inherits="" Debug="False" Description="Template description here." %>
<%@ Property Name="SampleStringProperty" Type="System.String" Default="SomeValue" Optional="True" Category="Strings" Description="This is a sample string property." %>
<%@ Property Name="SampleBooleanProperty" Type="System.Boolean" Default="True" Optional="False" Category="Booleans" Description="This is a sample boolean property." %>

<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="System.Data" %>

<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="System.Data" %>
<%-- Assembly References --%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="System.Data" %>
<%-- Namespace Imports --%>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.BaseTemplates" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="System.IO" %>
<!-- #include file="..\\..\\..\\include\\GolineUtilities.inc" -->
/*
 * Copyright(C) 2012 Okasan Information Systems Co.,Ltd. All rights reserved.
 */
package jp.co.okasan.pr.<%=Package%>.<%=Package%><%=PackageFormCode%>;

import java.awt.Component;
import java.util.ArrayList;
import java.util.List;

import jp.co.okasan.pr.cmn.PRHelper;
import jp.co.okasan.cm.<%=Package%>.<%=Package%><%=PackageFormCode%>.<%=this.GetInputDataName(this.Package, this.PackageFormCode)%>;

import jp.co.nec.frw0000.pr.util.Frw00AbstractBusinessState;
import jp.co.nec.frw0000.pr.util.Frw00FunctionKey;
import jp.co.nec.frw0000.cm.data.Frw00HeaderData;
import jp.co.nec.frw0000.cm.data.Frw00InputData;
import jp.co.nec.frw0000.cm.data.Frw00ResultData;
import jp.co.nec.frw1000.pr.clcommon.Frw10ClientException;
import jp.co.nec.frw1000.pr.clcommon.Frw10ServerDataProc;
import jp.co.nec.frw1000.pr.component.InputComponentIF;

/**
 * <%=this.GetChangeInputName(this.Package, this.PackageFormCode)%> Class's Description <br>
 * Change input State process of <%=this.GetTableDescription(SourceTable)%> Class.
 *
 * <p>
 * Handle the "Change Input State" in Screen. 
 * </p>
 *
 * @author: <%=this.Author%> <%=this.GetCurrentDate()%> Create New
 */
public class <%=this.GetChangeInputName(this.Package, this.PackageFormCode)%> extends Frw00AbstractBusinessState {
	
	////////// Class Variables //////////
	
	/** Control class name of AP side */
	private static final String BUSINESS_CLASS_NAME = "jp.co.okasan.ap.<%=Package%>.<%=Package%><%=PackageFormCode%>.<%=this.GetControlName(this.Package, this.PackageFormCode)%>";
	
	/** Process method name of AP side */
	private static final String PROCESS_METHOD_NAME = "doTask";
	
	////////// Methods define //////////
	
	/**
	 * Return control class name to AP side. <br>
	 * 
	 * @param Nothing
	 * @return String Control class name
	 * @exception nothing
	 */
	public String getBusinessClassName() {
		return BUSINESS_CLASS_NAME;	
	}
	
	/**
	 * Return process method name of the AP side. <br>
	 * 
	 * @param Nothing
	 * @return String
	 * @exception Nothing
	 */	
	public String getProcessMethodName() {
		return PROCESS_METHOD_NAME;	
	}
	
	/**
     * Return the default focus component. <br>
     * <p>
	 * Set the first component want to focus when display screen.
     * </p>
     * @param Nothing
     * @return default focus component
     * @exception Nothing
     */
	public Component getDefaultFocusComponent() {
	
        // Get client Area
		<%=this.GetPanelName(this.Package, this.PackageFormCode)%> clientArea = (<%=this.GetPanelName(this.Package, this.PackageFormCode)%>) getClientPanel();

        // Return default key control
        return clientArea.txt<%=this.GetColumnName(SourceTable.PrimaryKey.MemberColumns[0])%>;
    }
	
	/**
	 * Return enabled function key. <br>
	 * 
	 * @param Nothing
	 * @return int Enabled function key
	 * @exception Frw10ClientException
	 */
	public int getEnabledFunction() throws Frw10ClientException {
	
        // return function default
        return Frw00FunctionKey.FUNCTION_DEFAULT;
    }
		
	/**
	 * Render the input data and send to AP side. <br>
	 * <p>
	 * Set value for input data class.
	 * </p>
	 * 
	 * @param Nothing
	 * @return Frw00InputData The input data class
	 * @exception Frw10ClientException throw when have a exception while reading client component.
	 */
	public Frw00InputData getSendData() throws Frw10ClientException {
	
		// Create instance of input data class
		<%=this.GetInputDataName(this.Package, this.PackageFormCode)%> inputData = new <%=this.GetInputDataName(this.Package, this.PackageFormCode)%>();      
		
		// Get input data from screen to client area
		<%=this.GetPanelName(this.Package, this.PackageFormCode)%> clientArea = (<%=this.GetPanelName(this.Package, this.PackageFormCode)%>) getClientPanel();
		
		// Set the input data with the value from input component of client area
		Frw10ServerDataProc.getInputData(clientArea, inputData);
		
		// Set current updated time
		inputData.setTimeStamp(clientArea.getTimeStamp());
		
		// Set Base PR data
		inputData.setPrData(PRHelper.getPrData());
		
		return inputData;
	}
	
	/**
	 * Return screen window state ID of this class. <br>
	 * 
	 * @param Nothing
	 * @return String Change Input window state(Frw00HeaderData.WNDSTAT_CHANGE_INPUT)
	 * @exception Nothing
	 */
	public String getWindowStatus() {
		return Frw00HeaderData.WNDSTAT_CHANGE_INPUT;
	}
	
		/**
	 * Return the list of disable components in screen. <br>
	 * 
	 * @param Nothing
	 * @return List of disable components
	 * @exception Nothing
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public List getUnEditComponentList() {
		// Create instance of list disable component
		List lockComponents = new ArrayList();
		<%=this.GetPanelName(this.Package, this.PackageFormCode)%> clientArea = (<%=this.GetPanelName(this.Package, this.PackageFormCode)%>) getClientPanel();

		// Lock key field
		lockComponents.addAll(clientArea.getDefaultUnEditComponents());

		return lockComponents;
	}

	
	/**
     * Notify when have something change in window component. <br>
     * <p>
	 * This method run when enable component value is changed.
     * </p>
     * 
     * @param component InputComponentIF the component was changed
     * @return Nothing
     * @exception Frw10ClientException exception raised 
     */	
	public void notifyItemChanged(InputComponentIF component) throws Frw10ClientException {
	
		// Get input data from screen to client area
		<%=this.GetPanelName(this.Package, this.PackageFormCode)%> clientArea = (<%=this.GetPanelName(this.Package, this.PackageFormCode)%>) getClientPanel();
		
		// Set need to get data to true when Key changed
		<%int count1 =0;%>
		if (<%foreach(ColumnSchema column in this.SourceTable.PrimaryKey.MemberColumns){%>component.equals(clientArea.txt<%=this.GetColumnName(column)%>)<%count1++;%><%if(count1 < this.SourceTable.PrimaryKey.MemberColumns.Count){%> || <%}%><%}%>) {
			clientArea.needToGetData = true;
		}
		
		<%int count =0;%>
		if (component.equals(clientArea.cboActionMode)||
			<%foreach(ColumnSchema column in this.SourceTable.PrimaryKey.MemberColumns){%>component.equals(clientArea.txt<%=this.GetColumnName(column)%>)<%count++;%><%if(count < this.SourceTable.PrimaryKey.MemberColumns.Count){%> || <%}%><%}%>) {
				
			// Change state to WNDSTAT_INPUT
			setBusinessState(Frw00HeaderData.WNDSTAT_INPUT);
		}
	}
	
	/**
	 * Set screen component with the response data from AP if successfull. <br>
	 * <p>
	 * Set screen's comonent with the response data (from AP) and change the Window state.
	 * Process as below 
	 * </p>
	 * <ol>
	 *  <li> Change the window state to WNDSTAT_CONFIRM.
	 *  <li> Set the response data to component.
	 * </ol>
	 * 
	 * @param recvData Frw00ResultData Response data from AP side.
	 * @return Nothing
	 * @exception Frw10ClientException if have a exception while writing to client component.
	 */
	public void setSuccessResultData(Frw00ResultData recvData)throws Frw10ClientException {

		// Change the window state
		setBusinessState(Frw00HeaderData.WNDSTAT_CONFIRM);
	}
}
<script runat="template">
// My methods here.

public string SampleMethod()
{
	return "Method output.";
}
</script>