<%-- 
Name:
Author: 
Description: 
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="" Inherits="" Debug="False" Description="Template description here." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="1. Context"
	Description="Table that the stored procedures should be based on." %>	

<%@ Property Name="FinderCode" Type="System.String" Default="1000" Category="1. Context" Description="Help Form Code" %>
<%@ Property Name="UpdaterCode" Type="System.String" Default="1000" Category="1. Context" Description="Package Form Code" %>

<%@ Property Name="Author" Type="System.String" Default="Huan.Nguyen Van" Category="1. Context" Description="Author" %>
<%@ Property Name="Package" Type="System.String" Default="Package" Category="1. Context" Description="Author kage" %>
<%@ Property Name="Prefix" Type="System.String" Default="Pkg" Category="1. Context" Description="Prefix " %>
<%@ Property Name="EntityName" Type="System.String" Default="EntityName" Category="1. Context" Description="Name of entity" %>

<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="" Inherits="" Debug="False" Description="Template description here." %>
<%@ Property Name="SampleStringProperty" Type="System.String" Default="SomeValue" Optional="True" Category="Strings" Description="This is a sample string property." %>
<%@ Property Name="SampleBooleanProperty" Type="System.Boolean" Default="True" Optional="False" Category="Booleans" Description="This is a sample boolean property." %>

<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="System.Data" %>

<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="System.Data" %>
<%-- Assembly References --%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="System.Data" %>
<%-- Namespace Imports --%>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.BaseTemplates" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="System.IO" %>
<!-- #include file="..\\include\\GolineUtilities.inc" -->
	/**
	 * Method find <%=this.EntityName%> from table <br>
	 * 
	 * @param u String User
	 * @param f String filter string
	 * @param param String param
	 * @return Response data
	 */
	@POST
	@Path("/<%=this.FinderCode%>")
	public Response find<%=this.EntityName%>(@QueryParam("cred") String c,
			@QueryParam("filter") String f, @QueryParam("param") String param) {
		
		ResponseBuilder builder = Response.status(201); 
		ObjectMapper mapper = new ObjectMapper();
		String result = "";
				
		try {
			Credential cred = mapper.readValue(c, Credential.class);
			
			<%=this.EntityName%> filter = mapper.readValue(f, <%=this.EntityName%>.class);
			
			List<<%=this.EntityName%>> data = commonBean.find<%=this.EntityName%>(cred.getBaseUser(), filter);
			
			if(data!= null){
				result = mapper.writeValueAsString(data);
			}
		} catch (UserException e) {
			this.setError(builder, e.getErrorCd(), e.getErrorMessage());
		} catch (Exception e) {
			this.setError(builder, ErrorCode.MSG1001, e.getMessage());
		}
	
		return builder.entity(result).build();
	}
	
	/**
	 * Method update <%=this.EntityName%> from table <br>
	 * 
	 * @param c String credeltial 
	 * @param data filter
	 * @param action String 
	 * @return
	 */
	@POST
	@Path("/<%=this.UpdaterCode%>")
	public Response update<%=this.EntityName%>(@QueryParam("cred") String c,
			@QueryParam("data") String d, @QueryParam("action") String action) {
		
		ResponseBuilder builder = Response.status(201); 
		ObjectMapper mapper = new ObjectMapper();
		String entiryResult = "";
				
		try {
			Credential cred = mapper.readValue(c, Credential.class);
			
			<%=this.EntityName%> data = mapper.readValue(d, <%=this.EntityName%>.class);
			
			<%=this.EntityName%> result = commonBean.update<%=this.EntityName%>(cred.getBaseUser(), data, action);
			
			if(result!= null){
				entiryResult = mapper.writeValueAsString(result);
			}
		} catch (UserException e) {
			this.setError(builder, e.getErrorCd(), e.getErrorMessage());
		} catch (Exception e) {
			this.setError(builder, ErrorCode.MSG1001, e.getMessage());
		}
	
		return builder.entity(entiryResult).build();
	}
	
<script runat="template">
// My methods here.

public string SampleMethod()
{
	return "Method output.";
}
</script>