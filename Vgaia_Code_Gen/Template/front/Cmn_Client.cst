<%-- 
Name:
Author: 
Description: 
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="" Inherits="" Debug="False" Description="Template description here." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="1. Context"
	Description="Table that the stored procedures should be based on." %>	

<%@ Property Name="FinderCode" Type="System.String" Default="1000" Category="1. Context" Description="Help Form Code" %>
<%@ Property Name="UpdaterCode" Type="System.String" Default="1000" Category="1. Context" Description="Package Form Code" %>

<%@ Property Name="Author" Type="System.String" Default="Huan.Nguyen Van" Category="1. Context" Description="Author" %>
<%@ Property Name="Package" Type="System.String" Default="Package" Category="1. Context" Description="Author kage" %>
<%@ Property Name="Prefix" Type="System.String" Default="Pkg" Category="1. Context" Description="Prefix " %>
<%@ Property Name="EntityName" Type="System.String" Default="EntityName" Category="1. Context" Description="Name of entity" %>

<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="" Inherits="" Debug="False" Description="Template description here." %>
<%@ Property Name="SampleStringProperty" Type="System.String" Default="SomeValue" Optional="True" Category="Strings" Description="This is a sample string property." %>
<%@ Property Name="SampleBooleanProperty" Type="System.Boolean" Default="True" Optional="False" Category="Booleans" Description="This is a sample boolean property." %>

<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="System.Data" %>

<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="System.Data" %>
<%-- Assembly References --%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="System.Data" %>
<%-- Namespace Imports --%>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.BaseTemplates" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="System.IO" %>
<!-- #include file="..\\include\\GolineUtilities.inc" -->
package jp.co.okasan.client;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import javax.ws.rs.core.MultivaluedMap;

import org.codehaus.jackson.JsonGenerationException;
import org.codehaus.jackson.map.JsonMappingException;
import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.type.TypeReference;

import jp.co.okasan.constants.ActionType;
import jp.co.okasan.constants.EntityType;
import jp.co.okasan.constants.UserType;

import com.sun.jersey.api.client.Client;
import com.sun.jersey.api.client.ClientResponse;
import com.sun.jersey.api.client.UniformInterfaceException;
import com.sun.jersey.api.client.WebResource;
import com.sun.jersey.core.util.MultivaluedMapImpl;

import jp.co.okasan.data.<%=this.EntityName%>;
import jp.co.okasan.data.User;
import jp.co.okasan.utils.ClientHelper;

public class <%=this.EntityName%>Client {
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		try {
			System.out.println("1: create<%=this.EntityName%>");
			System.out.println("2: update<%=this.EntityName%>");
			System.out.println("3: delete<%=this.EntityName%>");
			System.out.println("4: find<%=this.EntityName%>");
			System.out.println("Please enter your option to run");
			char tmp = (char) System.in.read();
			if (tmp == '1') {
				create<%=this.EntityName%>();
			} else if (tmp == '2') {
				update<%=this.EntityName%>();
			} else if (tmp == '3'){
				delete<%=this.EntityName%>();
			} else if (tmp == '4'){
				find<%=this.EntityName%>();
			}
			
			System.out.println("testing complted.");
		} catch (JsonGenerationException e) {
			e.printStackTrace();
		} catch (JsonMappingException e) {
			e.printStackTrace();
		} catch (UniformInterfaceException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	private static void create<%=this.EntityName%>()
		throws JsonGenerationException, JsonMappingException, IOException {
		
		System.out.println("Begin create...");
		ObjectMapper mapper = new ObjectMapper();
		
		User user = new User();
		user.setEmailAdrs("huannv@goline.vn");
		user.setIdNumber("123467");
		user.setUserName("admin");
		user.setUserType(UserType.BROKER_USER);
		MultivaluedMap<String, String> queryParams = new MultivaluedMapImpl();
		queryParams.add("user", mapper.writeValueAsString(user.getBaseUser()));
		
		String url = "http://goline.vn:8080/goline-rest/rest/json/<%=this.Package%>/<%=this.UpdaterCode%>";
		//String url = "http://localhost:8080/goline-rest/rest/json/<%=this.Package%>/<%=this.UpdaterCode%>";
		WebResource webResource = ClientHelper.CreateResource(url, user);
		
		<%=this.EntityName%> data = new <%=this.EntityName%>();
		
		queryParams.add("data", mapper.writeValueAsString(data));
		queryParams.add("action", ActionType.CREATE);
		
		ClientResponse response = webResource.queryParams(queryParams)
					.post(ClientResponse.class);

		System.out.println("End create...");
		System.out.println("Check result data...");
		System.out.println("Status = " + response.getStatus());

		if (response.getStatus() != 201) {
			throw new RuntimeException("Failed : HTTP error code : "
						+ response.getStatus());
		}

		String output = response.getEntity(String.class);
		System.out.println(output);	
	}
	
	private static void update<%=this.EntityName%>()
		throws JsonGenerationException, JsonMappingException, IOException {
		
		System.out.println("Begin update...");
		ObjectMapper mapper = new ObjectMapper();
		
		User user = new User();
		user.setEmailAdrs("huannv@goline.vn");
		user.setIdNumber("123467");
		user.setUserName("admin");
		user.setUserType(UserType.BROKER_USER);
		MultivaluedMap<String, String> queryParams = new MultivaluedMapImpl();
		queryParams.add("user", mapper.writeValueAsString(user.getBaseUser()));
		
		String url = "http://goline.vn:8080/goline-rest/rest/json/<%=this.Package%>/<%=this.UpdaterCode%>";
		//String url = "http://localhost:8080/goline-rest/rest/json/<%=this.Package%>/<%=this.UpdaterCode%>";
		WebResource webResource = ClientHelper.CreateResource(url, user);
		
		<%=this.EntityName%> data = new <%=this.EntityName%>();
		// Create data to update
		
		queryParams.add("data", mapper.writeValueAsString(data));
		queryParams.add("action", ActionType.UPDATE);
		
		ClientResponse response = webResource.queryParams(queryParams)
					.post(ClientResponse.class);

		System.out.println("End update...");
		System.out.println("Check result data...");
		System.out.println("Status = " + response.getStatus());

		if (response.getStatus() != 201) {
			throw new RuntimeException("Failed : HTTP error code : "
						+ response.getStatus());
		}

		String output = response.getEntity(String.class);
		System.out.println(output);	
	}
	
	private static void delete<%=this.EntityName%>()
		throws JsonGenerationException, JsonMappingException, IOException {
		
		System.out.println("Begin delete...");
		ObjectMapper mapper = new ObjectMapper();
		
		User user = new User();
		user.setEmailAdrs("huannv@goline.vn");
		user.setIdNumber("123467");
		user.setUserName("admin");
		user.setUserType(UserType.BROKER_USER);
		MultivaluedMap<String, String> queryParams = new MultivaluedMapImpl();
		queryParams.add("user", mapper.writeValueAsString(user.getBaseUser()));
		
		String url = "http://goline.vn:8080/goline-rest/rest/json/<%=this.Package%>/<%=this.UpdaterCode%>";
		//String url = "http://localhost:8080/goline-rest/rest/json/<%=this.Package%>/<%=this.UpdaterCode%>";
		WebResource webResource = ClientHelper.CreateResource(url, user);
		
		<%=this.EntityName%> data = new <%=this.EntityName%>();
		
		queryParams.add("data", mapper.writeValueAsString(data));
		queryParams.add("action", ActionType.DELETE);
		
		ClientResponse response = webResource.queryParams(queryParams)
					.post(ClientResponse.class);

		System.out.println("End delete...");
		System.out.println("Check result data...");
		System.out.println("Status = " + response.getStatus());

		if (response.getStatus() != 201) {
			throw new RuntimeException("Failed : HTTP error code : "
						+ response.getStatus());
		}

		String output = response.getEntity(String.class);
		System.out.println(output);	
	}
	
	private static void find<%=this.EntityName%>()
		throws JsonGenerationException, JsonMappingException, IOException {
		
		System.out.println("Begin find...");
		ObjectMapper mapper = new ObjectMapper();
		
		User user = new User();
		user.setEmailAdrs("huannv@goline.vn");
		user.setIdNumber("123467");
		user.setUserName("admin");
		user.setUserType(UserType.BROKER_USER);
		MultivaluedMap<String, String> queryParams = new MultivaluedMapImpl();
		queryParams.add("user", mapper.writeValueAsString(user.getBaseUser()));
		
		String url = "http://goline.vn:8080/goline-rest/rest/json/<%=this.Package%>/<%=this.FinderCode%>";
		//String url = "http://localhost:8080/goline-rest/rest/json/<%=this.Package%>/<%=this.FinderCode%>";
		WebResource webResource = ClientHelper.CreateResource(url, user);
		
		<%=this.EntityName%> filter = new <%=this.EntityName%>();
		
		queryParams.add("finter", mapper.writeValueAsString(filter));
				
		ClientResponse response = webResource.queryParams(queryParams)
					.post(ClientResponse.class);

		System.out.println("End find...");
		System.out.println("Check result data...");
		System.out.println("Status = " + response.getStatus());

		if (response.getStatus() != 201) {
			throw new RuntimeException("Failed : HTTP error code : "
						+ response.getStatus());
		}

		String output = response.getEntity(String.class);
		System.out.println(output);	
		
		if (!output.isEmpty()) {
			List<<%=this.EntityName%>> list = mapper.readValue(output,
					new TypeReference<ArrayList<<%=this.EntityName%>>>() {
					});

			if (list != null) {
				System.out.println("Found " + String.valueOf(list.size())
						+ " Records");
			}
		}
	}
}

<script runat="template">
// My methods here.

public string SampleMethod()
{
	return "Method output.";
}
</script>