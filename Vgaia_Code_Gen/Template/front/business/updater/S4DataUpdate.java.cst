<%-- 
Name:
Author: 
Description: 
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="" Inherits="" Debug="False" Description="Template description here." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="1. Context"
	Description="Table that the stored procedures should be based on." %>	

<%@ Property Name="FinderCode" Type="System.String" Default="1000" Category="1. Context" Description="Help Form Code" %>
<%@ Property Name="UpdaterCode" Type="System.String" Default="1000" Category="1. Context" Description="Package Form Code" %>

<%@ Property Name="Author" Type="System.String" Default="Huan.Nguyen Van" Category="1. Context" Description="Author" %>
<%@ Property Name="Package" Type="System.String" Default="Package" Category="1. Context" Description="Author kage" %>
<%@ Property Name="Prefix" Type="System.String" Default="Pkg" Category="1. Context" Description="Prefix " %>
<%@ Property Name="EntityName" Type="System.String" Default="EntityName" Category="1. Context" Description="Name of entity" %>

<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="" Inherits="" Debug="False" Description="Template description here." %>
<%@ Property Name="SampleStringProperty" Type="System.String" Default="SomeValue" Optional="True" Category="Strings" Description="This is a sample string property." %>
<%@ Property Name="SampleBooleanProperty" Type="System.Boolean" Default="True" Optional="False" Category="Booleans" Description="This is a sample boolean property." %>

<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="System.Data" %>

<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="System.Data" %>
<%-- Assembly References --%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="System.Data" %>
<%-- Namespace Imports --%>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.BaseTemplates" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="System.IO" %>
<!-- #include file="..\\..\\..\\include\\GolineUtilities.inc" -->
/*
 * Copyright(C) 2012 Okasan Information Systems Co.,Ltd. All rights reserved.
 */
package jp.co.okasan.business.<%=this.Package%>.<%=this.Prefix.ToLower()%><%=this.UpdaterCode%>;

import java.sql.SQLException;
import java.util.List;

import jp.co.okasan.cmn.UserException;
import jp.co.okasan.cmn.base.BaseContext;
import jp.co.okasan.cmn.base.IStage;
import jp.co.okasan.data.<%=this.EntityName%>;
import jp.co.okasan.dao.<%=this.Package%>.<%=this.EntityName%>Updater;

/**
 * S4DataUpdate class's Description. <br>
 * 
 * @author: <%=this.Author%> <%=this.GetCurrentDate()%> Create New
 */
public class S4DataUpdate implements IStage {
	
	////////// Class Variables //////////
	
	/** Class name of initial stage */
	private static final String CLASS_NAME = S4DataUpdate.class.getName();

	/** Method name of initial stage */
	private static final String METHOD_NAME = "doTask";
	
	/** Declate data updater */
	private <%=this.EntityName%>Updater dataUpdater;

	/** Declare data to update */
	private <%=this.EntityName%> updateData;
	
	////////// Class Constructor //////////
	
	/**
	 * Constructor. <br>
	 * 
	 * @param Nothing
	 * @exception Nothing
	 */
	public S4DataUpdate() {
		dataUpdater = new <%=this.EntityName%>Updater();
	}
	
	////////// Methods Define //////////

	/**
	 * Process Data Update task <br>
	 * 
	 * @param ctx Context the contextual of <%=this.GetTableDescription(this.SourceTable)%>
	 * @return boolean dotask state
	 * @exception SQLException
	 */
	public boolean doTask(BaseContext<?> ctx) throws SQLException, UserException {
        updateData = new <%=this.EntityName%>();

		// Get data to update
		getUpdateData(ctx);

		// Update data
		updateData(ctx);

		// Set data after update
		setDataAfterUpdate(ctx);

		return true;
	}
	
	/**
	 * Method get data to update <br>
	 * 
	 * @param ctx Context the contextual of <%=this.GetTableDescription(this.SourceTable)%>
	 * @exception SQLException
	 */
	private void getUpdateData(BaseContext<?> ctx) throws SQLException,
			UserException {

		<%=this.Prefix%><%=this.UpdaterCode%>Context context = (<%=this.Prefix%><%=this.UpdaterCode%>Context)ctx;
		
		<%=this.EntityName%> inputData = context.getInputData();
		
		// Get old data
		<%int count=0;%>
		<%=this.EntityName%> updateData = dataUpdater.findDataForUpdate(context.getUser(), 
			<%foreach(ColumnSchema column in SourceTable.PrimaryKey.MemberColumns){%>inputData.get<%=this.GetColumnName(column)%>()<%count++;%><%if(count < SourceTable.PrimaryKey.MemberColumns.Count){%>,<%}%><%}%>,
			context.getConnection());
		
		// if null
		if (updateData == null) {
			throw new UserException("MSG0011E", "<%=this.GetColumnDescription(SourceTable.PrimaryKey.MemberColumns[0])%>");
		} 
		
		// Check data changed
		
	}
	
	/**
	 * Method update data <br>
	 * 
	 * @param ctx BaseContext<?> the contextual of <%=this.GetTableDescription(this.SourceTable)%>
	 * @exception SQLException
	 */
	private void updateData(BaseContext<?> ctx) throws SQLException,
			UserException {
		<%=this.Prefix%><%=this.UpdaterCode%>Context context = (<%=this.Prefix%><%=this.UpdaterCode%>Context) ctx;
			
		// Get input data
		<%=this.EntityName%> inputData = context.getInputData();

		// Get source data
		<%=this.EntityName%> currentData = context.getCurrentData();
		<%foreach(ColumnSchema col in this.SourceTable.Columns){%>
		<%if(col.Name == "DEL_CD" || col.Name == "REG_DATE_TIME" || col.Name == "REG_USER_ID" || col.Name == "UPD_DATE_TIME" || col.Name == "UPD_USER_ID") continue;%>
		// Set <%=this.GetColumnDescription(col)%>
		<%if(this.ColumnIsString(col)){%>
		updateData.set<%=this.GetColumnName(col)%>(inputData.get<%=this.GetColumnName(col)%>());
		<%}else{%>
		updateData.set<%=this.GetColumnName(col)%>(inputData.get<%=this.GetColumnName(col)%>());
		<%}%>
		<%}%>


		//updateData.setUpdUserId(prData.getUserId());
		//updateData.setUpdDateTime(CommonFunction.getTimeStamp());

		// update from table
		int result = dataUpdater.updateData(context.getUser(), updateData, context.getConnection());
		context.setUpdateResult(result);
		context.setCurrentData(updateData);
	}
	
	/**
	 * Process data after delete record <br>
	 * 
	 * @param ctx Context the contextual of <%=this.GetTableDescription(this.SourceTable)%>
	 * @exception Nothing
	 */
	private void setDataAfterUpdate(BaseContext<?> ctx) {
		// Get context data
		<%=this.Prefix%><%=this.UpdaterCode%>Context context = (<%=this.Prefix%><%=this.UpdaterCode%>Context) ctx;
		context.setCurrentData(updateData);
	}
}

<script runat="template">
// My methods here.

public string SampleMethod()
{
	return "Method output.";
}
</script>