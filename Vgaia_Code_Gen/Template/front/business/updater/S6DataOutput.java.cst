<%-- 
Name:
Author: 
Description: 
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="" Inherits="" Debug="False" Description="Template description here." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="1. Context"
	Description="Table that the stored procedures should be based on." %>	

<%@ Property Name="HelpFormCode" Type="System.String" Default="1000" Category="1. Context" Description="Help Form Code" %>
<%@ Property Name="PackageFormCode" Type="System.String" Default="1000" Category="1. Context" Description="Package Form Code" %>

<%@ Property Name="Author" Type="System.String" Default="Goline Coporation" Category="1. Context" Description="Author" %>
<%@ Property Name="Package" Type="System.String" Default="mst" Category="1. Context" Description="Author kage" %>

<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="" Inherits="" Debug="False" Description="Template description here." %>
<%@ Property Name="SampleStringProperty" Type="System.String" Default="SomeValue" Optional="True" Category="Strings" Description="This is a sample string property." %>
<%@ Property Name="SampleBooleanProperty" Type="System.Boolean" Default="True" Optional="False" Category="Booleans" Description="This is a sample boolean property." %>

<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="System.Data" %>

<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="System.Data" %>
<%-- Assembly References --%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="System.Data" %>
<%-- Namespace Imports --%>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.BaseTemplates" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="System.IO" %>
<!-- #include file="..\\..\\..\\include\\GolineUtilities.inc" -->
/*
 * Copyright(C) 2012 Okasan Information Systems Co.,Ltd. All rights reserved.
 */
package jp.co.okasan.ap.<%=Package%>.<%=Package%><%=PackageFormCode%>;
import java.sql.SQLException;

import jp.co.nec.com0000.ap.Context;
import jp.co.nec.com0000.ap.IStage;
import jp.co.nec.frw0000.ap.Frw00InstanceFactory;
import jp.co.nec.frw0000.cm.logging.Frw00Logger;

import jp.co.okasan.cmn.AnswerOutput;
import jp.co.okasan.cmn.AnswerOutputHelper;
import jp.co.okasan.cmn.MessageOutput;
import jp.co.okasan.cmn.ReportFunction;

/**
 * S6DataOutput Class's Description. <br>
 * 
 * @author: <%=this.Author%> <%=this.GetCurrentDate()%> Create New
  */
public class S6DataOutput implements IStage {
	
	////////// Class Variables //////////
	
	/** Class name of initial stage */
	private static final String CLASS_NAME = S6DataOutput.class.getName();

	/** Method name of initial stage */
	private static final String METHOD_NAME = "doTask";

	////////// Class Constructor //////////
	
	/**
	 * Constructor Method <br>
	 * 
	 * @param Nothing
	 * @exception Nothing
	 */
	public S6DataOutput() {
	}
	
	////////// Class Methods //////////
	
	/**
	 * Create business route. <br>
	 * 
	 * @param factory Frw00InstanceFactory instance of Factory
	 * @exception Nothing
	 */
	public void create(Frw00InstanceFactory factory) {
		ReportFunction.create(factory);
        AnswerOutput.create(factory);
        MessageOutput.create(factory);
	}
	
	/**
	 * Process Data Output task <br>
	 * 
	 * @param ctx Context the contextual of <%=this.GetTableDescription(this.SourceTable)%>
	 * @return boolean dotask state
	 * @exception SQLException
	 * @exception Frw00BlockadeException when table is blockade
	 */
	public boolean doTask(Context ctx) throws SQLException {
		final Frw00Logger logger = ctx.getLogger();
		logger.writeTrace(CLASS_NAME, METHOD_NAME, "enter");

		// Get current context
		<%=this.GetContextName(this.Package, this.PackageFormCode)%> context = (<%=this.GetContextName(this.Package, this.PackageFormCode)%>) ctx;

        // Set title
        context.setTitle("<%=this.GetTablename(this.SourceTable)%>");
		// Write log
		logger.writeTrace(CLASS_NAME, METHOD_NAME, "Excuted setTitle");

		AnswerOutputHelper answerOutputHelper = new AnswerOutputHelper();
		context.setRegHelper(answerOutputHelper.initAnswer());

		// Write log
		logger.writeTrace(CLASS_NAME, METHOD_NAME, "Excuted setRegHelper");

		<%=this.GetAnswerOutputName(this.Package, this.PackageFormCode)%> answerOutput = new <%=this.GetAnswerOutputName(this.Package, this.PackageFormCode)%>();
		answerOutput.doTask(context);

        // Write log
        logger.writeTrace(CLASS_NAME, METHOD_NAME, "Excuted answerOutput.doTask");
        AnswerOutput.doTask(context, context.getResultData());
		
		// Write log
		logger.writeTrace(CLASS_NAME, METHOD_NAME, "Excuted AnswerOutput.doTask");

        MessageOutput.doTask(context, context.getResultData());

		// Write log
		logger.writeTrace(CLASS_NAME, METHOD_NAME, "Excute answerOutputHelper.doTransaction");
		answerOutputHelper.doTransaction(context.getRegHelper());

		logger.writeTrace(CLASS_NAME, METHOD_NAME, "exit");
		return true;
	}
}

<script runat="template">
// My methods here.

public string SampleMethod()
{
	return "Method output.";
}
</script>