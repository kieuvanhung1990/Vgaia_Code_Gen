<%-- 
Name:
Author: 
Description: 
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="" Inherits="" Debug="False" Description="Template description here." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="1. Context"
	Description="Table that the stored procedures should be based on." %>	

<%@ Property Name="FinderCode" Type="System.String" Default="1000" Category="1. Context" Description="Help Form Code" %>
<%@ Property Name="UpdaterCode" Type="System.String" Default="1000" Category="1. Context" Description="Package Form Code" %>

<%@ Property Name="Author" Type="System.String" Default="Huan.Nguyen Van" Category="1. Context" Description="Author" %>
<%@ Property Name="Package" Type="System.String" Default="Package" Category="1. Context" Description="Author kage" %>
<%@ Property Name="Prefix" Type="System.String" Default="Pkg" Category="1. Context" Description="Prefix " %>
<%@ Property Name="EntityName" Type="System.String" Default="EntityName" Category="1. Context" Description="Name of entity" %>

<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="" Inherits="" Debug="False" Description="Template description here." %>
<%@ Property Name="SampleStringProperty" Type="System.String" Default="SomeValue" Optional="True" Category="Strings" Description="This is a sample string property." %>
<%@ Property Name="SampleBooleanProperty" Type="System.Boolean" Default="True" Optional="False" Category="Booleans" Description="This is a sample boolean property." %>

<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="System.Data" %>

<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="System.Data" %>
<%-- Assembly References --%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="System.Data" %>
<%-- Namespace Imports --%>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.BaseTemplates" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="System.IO" %>
<!-- #include file="..\include\GolineUtilities.inc" -->
/*
 * Copyright(C) 2016 Goline Information Systems Co.,Ltd. All rights reserved.
 * 
 */
package yazo.vn.dao;

import java.sql.SQLException;
import java.util.List;

import yazo.vn.domain.<%=this.EntityName%>;
import yazo.vn.domain.User;

<%int index = 1; %>
<%int count = 1;%>

/**
 * <%=this.EntityName%>Updater class's Description <BR>
 *
 * @author: <%=Author%> <%=this.GetCurrentDate()%> Create new
 */
public class <%=this.EntityName%>Impl extends BaseServiceImpl implements If<%=this.EntityName%> {
	
	public static <%=this.EntityName%> init<%=this.EntityName%>(User user<%foreach (ColumnSchema col in SourceTable.NonPrimaryKeyColumns ){%><%if(!isSpecialColumn(col)){%>, <%=this.GetFrontColumnDataType(col)%> <%=this.GetColumnNameParam(col)%><% }}%>){
		<%=this.EntityName%> data = new <%=this.EntityName%>();
		
		// Set data
		<%foreach ( ColumnSchema col in SourceTable.NonPrimaryKeyColumns ){%>
		<%if(!this.isSpecialColumn(col)){%>
		data.set<%=this.GetColumnName(col)%>(<%=this.GetColumnNameParam(col)%>);
		<%}%>
		<%}%>
		
		return data;
	}
		
	/**
	 * Method validate an record before insert or update in to table <br>
	 * 
	 * @param user current User
	 * @param data <%=this.EntityName%>
	 * @throws SQLException 
	 */
	public static void validate<%=this.EntityName%>(<%=this.EntityName%> data){
		// Validate input
		<%foreach ( ColumnSchema col in SourceTable.NonPrimaryKeyColumns ){%>
		<%if(!this.isSpecialColumn(col)){%>
		<%if(!col.AllowDBNull){%>
		<%if(IsNumberColumn(col)){%>
		<%if(col.Name.Contains("DATE")){%>
		if(!ItemValidator.checkDate(data.get<%=this.GetColumnName(col)%>(), true)){
			throw new ApplicationException("<%=col.Name%> is not correct format(yyyyMMdd).");
		}
		<%}else{%>
		if(CommonFuntion.isNullOrZero(data.get<%=this.GetColumnName(col)%>())){
			throw new ApplicationException("<%=col.Name%> is not null.");
		}		
		<%}%>
		<%}%>
		<%if(ColumnIsString(col)){%>
		if(!ItemValidator.checkMaxLength(data.get<%=this.GetColumnName(col)%>(), <%=col.Size%>, true)){
			throw new ApplicationException("<%=col.Name%> is not valid.");
		}
		<%}%>
		<%}else if(ColumnIsString(col)){%>
		if(!ItemValidator.checkMaxLength(data.get<%=this.GetColumnName(col)%>(), <%=col.Size%>)){
			throw new ApplicationException("<%=col.Name%> is not valid.");
		}		
		<%}%>
		<%if(IsNumberColumn(col)){%>
		<%if(col.Name.Contains("DATE")){%>
		if(!ItemValidator.checkDate(data.get<%=this.GetColumnName(col)%>(), false)){
			throw new ApplicationException("<%=col.Name%> is not correct format(yyyyMMdd).");
		}
		<%}%>
		<%}%>
		<%}%>
		<%}%>
	}

}		
<script runat="template">
// My methods here.

public string SampleMethod()
{
	return "Method output.";
}
</script>