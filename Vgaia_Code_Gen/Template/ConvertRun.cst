<%-- 
Name:
Author: 
Description: 
--%>
<%-- Context --%>
<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="" Inherits="" Debug="False" Description="Template description here." %>

<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="1. Context"
	Description="Table that the stored procedures should be based on." %>
<%@ Property Name="SourceTables" Type="SchemaExplorer.TableSchemaCollection" Category="1. Context"
	Description="Table that the stored procedures should be based on." %>	
<%@ Property Name="TargetTables" Type="SchemaExplorer.TableSchemaCollection" Category="1. Context"
	Description="Table that the stored procedures should be based on." %>	

<%@ Property Name="Author" Type="System.String" Default="TienNK" Category="1. Context" Description="Author" %>
<%@ Property Name="SourcePrefix" Type="System.String" Default="SBS" Category="1. Context" Description="Prefix " %>
<%@ Property Name="TargetPrefix" Type="System.String" Default="" Category="1. Context" Description="Prefix " %>

<%@ Property Name="GeneratePath" Type="System.String" Default="C:\Goline\" Category="2. Options" Description="Path to gen" %>		
<%@ Property Name="DeleteOldData" Type="System.Boolean" Default="false" Category="2. Options" Description="Delete Old Data.." %>	
	
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="System.Data" %>
<%-- Assembly References --%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="System.Data" %>
<%-- Namespace Imports --%>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.BaseTemplates" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Collections.Generic" %>
<!-- #include file="include\\GolineUtilities.inc" -->

<%ClearOldData();%>
<%Gen();%>
Success!
<script runat="template">
public void Gen()
{
	StreamWriter sw;
	string filePath;
	string categoryDir;
	CodeTemplate template = null;
	
	//SourceObject.cst
	categoryDir = string.Format(@"{0}\Components\sbs", GetGenPath());
	if (!Directory.Exists(categoryDir))
	{
		Directory.CreateDirectory(categoryDir);
	}
	ClearFolder(categoryDir);
	for(int i = 0 ; i < SourceTables.Count; i++)
	{
		template = CreateTemplate("convert\\SourceObject.cst");
		template.SetProperty("Author",Author);
		template.SetProperty("SourceTable", SourceTables[i]);
		template.SetProperty("SourcePrefix", this.SourcePrefix);
		
		filePath = string.Format(@"{0}\{1}.cs", categoryDir, ReturnObjectName(SourceTables[i]));
		sw = GetSW(filePath);
		template.Render(sw);
		sw.Close();
		Response.WriteLine(string.Format("Genrator file {0} ", filePath), true, Encoding.UTF8);
	}
	
	//SourceDataAccess.cst
	categoryDir = string.Format(@"{0}\DAO\sbs", GetGenPath());
	if (!Directory.Exists(categoryDir))
	{
		Directory.CreateDirectory(categoryDir);
	}
	ClearFolder(categoryDir);
	for(int i = 0 ; i < SourceTables.Count; i++)
	{
		template = CreateTemplate("convert\\SourceDataAccess.cst");
		template.SetProperty("Author",Author);
		template.SetProperty("SourceTable", SourceTables[i]);
		template.SetProperty("SourcePrefix", this.SourcePrefix);
		
		filePath = string.Format(@"{0}\{1}DataAccess.cs", categoryDir, ReturnObjectName(SourceTables[i]));
		sw = GetSW(filePath);
		template.Render(sw);
		sw.Close();
		Response.WriteLine(string.Format("Genrator file {0} ", filePath), true, Encoding.UTF8);
	}
	
	//TargetObject.cst
	categoryDir = string.Format(@"{0}\Components\vgaia", GetGenPath());
	if (!Directory.Exists(categoryDir))
	{
		Directory.CreateDirectory(categoryDir);
	}
	ClearFolder(categoryDir);
	for(int i = 0 ; i < TargetTables.Count; i++)
	{
		template = CreateTemplate("convert\\TargetObject.cst");
		template.SetProperty("Author",Author);
		template.SetProperty("SourceTable", TargetTables[i]);
		template.SetProperty("TargetPrefix", this.TargetPrefix);
		
		filePath = string.Format(@"{0}\{1}.cs", categoryDir, ReturnConvertObjectName(TargetTables[i]));
		sw = GetSW(filePath);
		template.Render(sw);
		sw.Close();
		Response.WriteLine(string.Format("Genrator file {0} ", filePath), true, Encoding.UTF8);
	}
	
	//TargetDataAccess.cst
	categoryDir = string.Format(@"{0}\DAO\vgaia", GetGenPath());
	if (!Directory.Exists(categoryDir))
	{
		Directory.CreateDirectory(categoryDir);
	}
	ClearFolder(categoryDir);
	for(int i = 0 ; i < TargetTables.Count; i++)
	{
		template = CreateTemplate("convert\\TargetDataAccess.cst");
		template.SetProperty("Author",Author);
		template.SetProperty("SourceTable", TargetTables[i]);
		template.SetProperty("TargetPrefix", this.TargetPrefix);
		
		filePath = string.Format(@"{0}\{1}DataAccess.cs", categoryDir, ReturnConvertObjectName(TargetTables[i]));
		sw = GetSW(filePath);
		template.Render(sw);
		sw.Close();
		Response.WriteLine(string.Format("Genrator file {0} ", filePath), true, Encoding.UTF8);
	}
}

public string ReturnObjectName(TableSchema table)
{
	string stable = this.SourcePrefix + table.Name.ToString();
	return stable;
}

public string ReturnConvertObjectName(TableSchema table)
{
	string stable = this.TargetPrefix + getConvertTableName(table);
	return stable;
}

public CodeTemplate CreateTemplate(string templatefile)
{
	CodeTemplateCompiler compiler = new CodeTemplateCompiler(templatefile);
	compiler.Compile();		
	if (compiler.Errors.Count == 0)
	{
		return compiler.CreateInstance();
	}
	else
	{
		for (int i = 0; i < compiler.Errors.Count; i++)
		{
			Response.WriteLine(compiler.Errors[i].ToString());
		}
		return null;
	}		
}



public static StreamWriter GetSW(string path)
{
	StreamWriter sw = new StreamWriter(path, true, Encoding.UTF8);
	return sw;
}

public void ClearOldData()
{
	if(DeleteOldData)
	{
 		DirectoryInfo di = new DirectoryInfo(GetGenPath());
		foreach (DirectoryInfo directory in di.GetDirectories())
		{
			foreach (FileInfo fileInfo in directory.GetFiles())
			{
				fileInfo.Delete();
			}
		}
	}
}

public void ClearFolder(string path)
{
	DirectoryInfo di = new DirectoryInfo(path);
	foreach (FileInfo fileInfo in di.GetFiles())
	{
			fileInfo.Delete();
			File.Delete(fileInfo.FullName);
	}
		
	foreach (DirectoryInfo directory in di.GetDirectories())
	{
		foreach (FileInfo fileInfo in directory.GetFiles())
		{
			fileInfo.Delete();
			File.Delete(fileInfo.FullName);
		}
		
		directory.Delete();
		Directory.Delete(directory.FullName);
	}
	
	
}

public string GetGenPath()
{
	if (string.IsNullOrEmpty(GeneratePath))
	{
		throw new Exception("Khong xac dinh duoc GenereatePath");
	}
	
	string path = GeneratePath;
	
	if (!path.EndsWith(@"\"))
	{
		path += @"\";
	}
	
	path += "okasan";
	
	if (!Directory.Exists(path))
	{
		Directory.CreateDirectory(path);
	}
	
	return path;
}

public string ReturnObjectClass(string sobject)
{
	Dictionary<string, string> dict = new Dictionary<string, string>();
	string stable = sobject;
	return stable;
}
</script>
